name: Deploy Optim

on:
  ## main, develop, optimブランチへのプッシュをトリガーにする
  push:
    branches: [main, develop, optim]
    paths:
      - 'optim/**'

  ## main, develop, optimブランチへのプルリクをトリガーにする
  pull_request:
    branches: [main, develop, optim]
    paths:
      - 'optim/**'
      
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: pomodoro-optimizer
  LAMBDA_FUNCTION_NAME: pomodoro-optimizer

jobs:
  deploy:
    name: Deploy to AWS Lambda
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd optim
        
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Output image URI for next step
        echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Deploy to Lambda
      run: |
        # Update Lambda function with new image
        aws lambda update-function-code \
          --function-name $LAMBDA_FUNCTION_NAME \
          --image-uri $IMAGE_URI \
          --region $AWS_REGION
        
        # Wait for function update to complete
        aws lambda wait function-updated \
          --function-name $LAMBDA_FUNCTION_NAME \
          --region $AWS_REGION

    - name: Verify deployment
      run: |
        # Get function URL
        FUNCTION_URL=$(aws lambda get-function-url-config \
          --function-name $LAMBDA_FUNCTION_NAME \
          --region $AWS_REGION \
          --query 'FunctionUrl' \
          --output text)
        
        echo "Function URL: $FUNCTION_URL"
        
        # Test the deployment
        echo "Testing deployment..."
        sleep 10  # Wait for function to be ready
        
        # Simple health check
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $FUNCTION_URL || echo "000")
        
        if [ "$HTTP_STATUS" == "200" ]; then
          echo "✅ Deployment successful! API is responding."
        else
          echo "❌ Deployment may have issues. HTTP Status: $HTTP_STATUS"
          exit 1
        fi

    - name: Create deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Function Name**: $LAMBDA_FUNCTION_NAME" >> $GITHUB_STEP_SUMMARY
        echo "- **Region**: $AWS_REGION" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Tag**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image URI**: $IMAGE_URI" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Get function URL
        FUNCTION_URL=$(aws lambda get-function-url-config \
          --function-name $LAMBDA_FUNCTION_NAME \
          --region $AWS_REGION \
          --query 'FunctionUrl' \
          --output text)
        
        echo "- **Function URL**: $FUNCTION_URL" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### API Endpoints" >> $GITHUB_STEP_SUMMARY
        echo "- \`GET $FUNCTION_URL\` - サーバー状態確認" >> $GITHUB_STEP_SUMMARY
        echo "- \`GET $FUNCTION_URL/round_optimizer/{user_id}?focus_score=0.8\` - ラウンド最適化" >> $GITHUB_STEP_SUMMARY
        echo "- \`GET $FUNCTION_URL/session_optimizer/{user_id}?average_focus_score=0.7\` - セッション最適化" >> $GITHUB_STEP_SUMMARY
